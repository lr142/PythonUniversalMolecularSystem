import osimport syssys.path.append("../../")from Forcefield import *from Utility import *from UniversalMolecularSystem import *from XYZFile import *from MOL2File import *from BondDetection import *from VMDInterface import *from Opener import QuickOpenFiledef SetupMolecule(filename):    ms = QuickOpenFile(filename)    ms.AutoDetectBonds(DefaultBondRules())    for a in ms.molecules[0].atoms:        a.type = None    ms.Summary()    with open("dump.mol2", "w") as dumpfile:        output.setoutput(dumpfile)        ms.Write(MOL2File())        output.setoutput(sys.stdout)    return msdef AddLabels(molecularSystem,ABADI):    mol = ReduceSystemToOneMolecule(molecularSystem).molecules[0]    vmd = VMDInterface("dump.mol2", autobonds=False)    vmd.AddCommand("label textthickness 1.5")    vmd.AddCommand("label textsize 1.0")    if 0 in ABADI:        indexes = [_ for _ in range(len(mol.atoms))]        labels = ["%i:{}".format(a.charge) for a in mol.atoms]        vmd.AddLabels(indexes, labels, offset=[0.01, 0.01, 0.5])        vmd.AddCommand("mol modstyle 0 0 CPK 0.6 0.2 12.0 12.0")    elif 1 in ABADI:        indexes = [_ for _ in range(len(mol.atoms))]        labels = ["%i:{}".format(a.type) for a in mol.atoms]        vmd.AddLabels(indexes, labels, offset=[0.01, 0.01, 0.5])        vmd.AddCommand("mol modstyle 0 0 CPK 0.6 0.2 12.0 12.0")    for BADI in range(2,5):        if BADI not in ABADI:            continue        categories = ["-","-","Bonds","Angles","Dihedrals"]        pg = PathGenerator(mol.BondedMap())        paths = pg.AllBondsAnglesDihedrals(BADI)        for p in paths:            placeholder = "0/{} "*BADI            primitive = "label add {} {}".format(categories[BADI],placeholder)            cmd = None            if BADI == 2:                cmd = primitive.format(p[0],p[1])            elif BADI == 3:                cmd = primitive.format(p[0],p[1],p[2])            else:                cmd = primitive.format(p[0],p[1],p[2],p[3])            #print(primitive,cmd)            vmd.AddCommand(cmd)    return vmddef RunCase(structure_file_name,ff_atoms,ff_descript):    filename = os.path.join(".", structure_file_name)    ms = SetupMolecule(filename)    #ms = BreakupMoleculeByConnectivity(ms.molecules[0])    ff = Forcefield("system",ff_atoms,ff_descript)    # 如果需要组合力场，请在这里加入    # anotherFF = Forcefield("system",    #     os.path.join(FORCEFIELDSPATH, "TIP4PAtomTypes.txt"),    #     os.path.join(FORCEFIELDSPATH, "TIP4PDescription.txt"))    # ff.Extend(anotherFF)    ff.SetBoundary([[-50, 50], [-50, 50], [-50, 50]])    for mol in ms.molecules:        ff.AddMolecule(mol)    ff.Finalize()    ff.WriteLAMMPSFiles()    total_charge = 0.0    for iMol,mol in enumerate(ff.molecules):        for iAtom,atom in enumerate(mol.atoms):            total_charge += atom.charge            ms.molecules[iMol].atoms[iAtom].charge = atom.charge    print("Total Charge of System = [{}]".format(total_charge))    # include 1,2,3,4 to show atom types, bonds, angles, dihedrals, etc.    total_atoms = 0    for mol in ff.molecules:        total_atoms += len(mol.atoms)    if total_atoms < 300:        vmd = AddLabels(ms,[0])    else:        vmd = AddLabels(ms,[])    vmd.Run(dryrun=True)